//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.11.3.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using LogoFX.WebApi2.Core;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace Samples.Server.Api.Controllers
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.3.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v11.0.0.0))")]
    [System.Web.Http.RoutePrefix("api/v1")]
    public partial class SearchController : ApiControllerBase
    {
    
        /// <summary>Finds Documents</summary>
        /// <returns>OK</returns>
        private partial System.Threading.Tasks.Task<System.Web.Http.IHttpActionResult> PostSearchQueryImplementationAsync(QueryDto body, System.Threading.CancellationToken cancellationToken);
    	
    
        /// <summary>Finds Documents</summary>
        /// <returns>OK</returns>
        [System.Web.Http.HttpPost, System.Web.Http.Route("search")]
        public System.Threading.Tasks.Task<System.Web.Http.IHttpActionResult> PostSearchQuery([System.Web.Http.FromBody] [System.ComponentModel.DataAnnotations.Required] QueryDto body, System.Threading.CancellationToken cancellationToken = default)
        {
            return PostSearchQueryImplementationAsync(body, cancellationToken);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.3.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v11.0.0.0))")]
    [System.Web.Http.RoutePrefix("api/v1")]
    public partial class CourtsController : ApiControllerBase
    {
    
        /// <summary>Listing Courts</summary>
        /// <returns>OK</returns>
        private partial System.Threading.Tasks.Task<System.Web.Http.IHttpActionResult> GetCourtsImplementationAsync(System.Threading.CancellationToken cancellationToken);
    	
        /// <summary>Listing Court Level types</summary>
        /// <returns>OK</returns>
        private partial System.Threading.Tasks.Task<System.Web.Http.IHttpActionResult> GetCourtLevelsImplementationAsync(System.Threading.CancellationToken cancellationToken);
    	
    
        /// <summary>Listing Courts</summary>
        /// <returns>OK</returns>
        [System.Web.Http.HttpGet, System.Web.Http.Route("courts")]
        public System.Threading.Tasks.Task<System.Web.Http.IHttpActionResult> GetCourts(System.Threading.CancellationToken cancellationToken = default)
        {
            return GetCourtsImplementationAsync(cancellationToken);
        }
    
        /// <summary>Listing Court Level types</summary>
        /// <returns>OK</returns>
        [System.Web.Http.HttpGet, System.Web.Http.Route("courts/levels")]
        public System.Threading.Tasks.Task<System.Web.Http.IHttpActionResult> GetCourtLevels(System.Threading.CancellationToken cancellationToken = default)
        {
            return GetCourtLevelsImplementationAsync(cancellationToken);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.3.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v11.0.0.0))")]
    [System.Web.Http.RoutePrefix("api/v1")]
    public partial class ProceduresController : ApiControllerBase
    {
    
        /// <summary>Listing Procedure types</summary>
        /// <returns>OK</returns>
        private partial System.Threading.Tasks.Task<System.Web.Http.IHttpActionResult> GetProceduresImplementationAsync(System.Threading.CancellationToken cancellationToken);
    	
    
        /// <summary>Listing Procedure types</summary>
        /// <returns>OK</returns>
        [System.Web.Http.HttpGet, System.Web.Http.Route("procedures")]
        public System.Threading.Tasks.Task<System.Web.Http.IHttpActionResult> GetProcedures(System.Threading.CancellationToken cancellationToken = default)
        {
            return GetProceduresImplementationAsync(cancellationToken);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.3.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v11.0.0.0))")]
    [System.Web.Http.RoutePrefix("api/v1")]
    public partial class ProceedingsController : ApiControllerBase
    {
    
        /// <summary>Listing Proceeding types</summary>
        /// <returns>OK</returns>
        private partial System.Threading.Tasks.Task<System.Web.Http.IHttpActionResult> GetProceedingsImplementationAsync(System.Threading.CancellationToken cancellationToken);
    	
    
        /// <summary>Listing Proceeding types</summary>
        /// <returns>OK</returns>
        [System.Web.Http.HttpGet, System.Web.Http.Route("proceedings")]
        public System.Threading.Tasks.Task<System.Web.Http.IHttpActionResult> GetProceedings(System.Threading.CancellationToken cancellationToken = default)
        {
            return GetProceedingsImplementationAsync(cancellationToken);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.3.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v11.0.0.0))")]
    [System.Web.Http.RoutePrefix("api/v1")]
    public partial class InterestsController : ApiControllerBase
    {
    
        /// <summary>Listiting Interest types</summary>
        /// <returns>OK</returns>
        private partial System.Threading.Tasks.Task<System.Web.Http.IHttpActionResult> GetInterestsImplementationAsync(System.Threading.CancellationToken cancellationToken);
    	
    
        /// <summary>Listiting Interest types</summary>
        /// <returns>OK</returns>
        [System.Web.Http.HttpGet, System.Web.Http.Route("interests")]
        public System.Threading.Tasks.Task<System.Web.Http.IHttpActionResult> GetInterests(System.Threading.CancellationToken cancellationToken = default)
        {
            return GetInterestsImplementationAsync(cancellationToken);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.3.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v11.0.0.0))")]
    [System.Web.Http.RoutePrefix("api/v1")]
    public partial class EntitiesController : ApiControllerBase
    {
    
        /// <summary>Listing Entity types</summary>
        /// <returns>OK</returns>
        private partial System.Threading.Tasks.Task<System.Web.Http.IHttpActionResult> GetEntitiesImplementationAsync(System.Threading.CancellationToken cancellationToken);
    	
    
        /// <summary>Listing Entity types</summary>
        /// <returns>OK</returns>
        [System.Web.Http.HttpGet, System.Web.Http.Route("entities")]
        public System.Threading.Tasks.Task<System.Web.Http.IHttpActionResult> GetEntities(System.Threading.CancellationToken cancellationToken = default)
        {
            return GetEntitiesImplementationAsync(cancellationToken);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.3.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v11.0.0.0))")]
    [System.Web.Http.RoutePrefix("api/v1")]
    public partial class PrivilegesController : ApiControllerBase
    {
    
        /// <summary>Listing Privileges types</summary>
        /// <returns>OK</returns>
        private partial System.Threading.Tasks.Task<System.Web.Http.IHttpActionResult> GetPrivilegesImplementationAsync(System.Threading.CancellationToken cancellationToken);
    	
    
        /// <summary>Listing Privileges types</summary>
        /// <returns>OK</returns>
        [System.Web.Http.HttpGet, System.Web.Http.Route("privileges")]
        public System.Threading.Tasks.Task<System.Web.Http.IHttpActionResult> GetPrivileges(System.Threading.CancellationToken cancellationToken = default)
        {
            return GetPrivilegesImplementationAsync(cancellationToken);
        }
    }

    /// <summary>Describes the particular searched result item related to found document.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchResultItemDto 
    {
        [Newtonsoft.Json.JsonProperty("fragments", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<SearchResultItemFragmentDto> Fragments { get; set; } = new System.Collections.Generic.List<SearchResultItemFragmentDto>();
    
        [Newtonsoft.Json.JsonProperty("ranks", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<RankDto> Ranks { get; set; } = new System.Collections.Generic.List<RankDto>();
    
        [Newtonsoft.Json.JsonProperty("entities", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<EntityDto> Entities { get; set; } = new System.Collections.Generic.List<EntityDto>();
    
        [Newtonsoft.Json.JsonProperty("relatedCases", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<CaseReferenceDto> RelatedCases { get; set; } = new System.Collections.Generic.List<CaseReferenceDto>();
    
        [Newtonsoft.Json.JsonProperty("privilege", Required = Newtonsoft.Json.Required.Always)]
        public int Privilege { get; set; }
    
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DocumentReferenceDto Document { get; set; } = new DocumentReferenceDto();
    
        [Newtonsoft.Json.JsonProperty("mainCase", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CaseReferenceDto MainCase { get; set; } = new CaseReferenceDto();
    
        [Newtonsoft.Json.JsonProperty("applicableFilters", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<FilterReferenceDto> ApplicableFilters { get; set; } = new System.Collections.Generic.List<FilterReferenceDto>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Contains both the whole search result statistics for the documents search attempt and the list of particular results referencing found documents as well. The list of particular results items is constrained with number of items requested and the number of item to start.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchResultDto 
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<SearchResultItemDto> Items { get; set; } = new System.Collections.Generic.List<SearchResultItemDto>();
    
        /// <summary>The position of the first item returned in whole results array.</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double Start { get; set; }
    
        /// <summary>The position of the last item returned in whole results array.</summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double End { get; set; }
    
        /// <summary>The number of the search result items found.</summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double Total { get; set; }
    
        /// <summary>The query execution time.</summary>
        [Newtonsoft.Json.JsonProperty("executionTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public float ExecutionTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("distributionByFilters", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<FilterStatsDto> DistributionByFilters { get; set; } = new System.Collections.Generic.List<FilterStatsDto>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchResultItemFragmentDto 
    {
        /// <summary>Represents a text of the fragment.</summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Text { get; set; }
    
        [Newtonsoft.Json.JsonProperty("highlights", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<HighlightedPhraseDto> Highlights { get; set; } = new System.Collections.Generic.List<HighlightedPhraseDto>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Represents a highlighted part of the related text.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HighlightedPhraseDto 
    {
        /// <summary>The starting position</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double Start { get; set; }
    
        /// <summary>Indicates how many words (tokens) need to highlight</summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public double Count { get; set; } = 1D;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RankDto 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 10D)]
        public float Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Represents the Court DTO.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CourtDto 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 2)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CourtLevelDto Level { get; set; } = new CourtLevelDto();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EntityDto 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue)]
        public string Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CaseReferenceDto 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 10000)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("privilege", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Privilege { get; set; }
    
        [Newtonsoft.Json.JsonProperty("court", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Court { get; set; }
    
        [Newtonsoft.Json.JsonProperty("courtLevel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CourtLevel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Number { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CourtLevelDto 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DocumentReferenceDto 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 10000)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FilterReferenceDto 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public double Key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public int Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FilterStatsDto 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        public int Key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<Values> Values { get; set; } = new System.Collections.Generic.List<Values>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QueryDto 
    {
        [Newtonsoft.Json.JsonProperty("q", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Q { get; set; }
    
        /// <summary>The number of results per page.</summary>
        [Newtonsoft.Json.JsonProperty("num", Required = Newtonsoft.Json.Required.Always)]
        public int Num { get; set; } = 10;
    
        /// <summary>The number indicating a start index of the result.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Start { get; set; } = 0;
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public QueryDtoSource Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("searchInTitles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SearchInTitles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("searchInContent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SearchInContent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("searchInMemoTitles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SearchInMemoTitles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("searchInMemoContent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SearchInMemoContent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dateRangeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public QueryDtoDateRangeType DateRangeType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset StartDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset EndDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasAppeal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasAppeal { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("legalCase", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LegalCase { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("courtId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CourtId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("courtLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CourtLevel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("interest", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Interest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("procedure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Procedure { get; set; }
    
        [Newtonsoft.Json.JsonProperty("proceeding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Proceeding { get; set; }
    
        [Newtonsoft.Json.JsonProperty("privilege", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Privilege { get; set; }
    
        [Newtonsoft.Json.JsonProperty("entity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Entity { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProcedureDto 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public long Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProceedingDto 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public long Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EntityTypeDto 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public long Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InterestDto 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Represents the Privilege definition.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PrivilegeDto 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public long Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Values 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("frequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, 10D)]
        public double Frequency { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum QueryDtoSource
    {
        [System.Runtime.Serialization.EnumMember(Value = @"decisions")]
        Decisions = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"protocols")]
        Protocols = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum QueryDtoDateRangeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"1h")]
        _1h = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"24h")]
        _24h = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"1w")]
        _1w = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"1m")]
        _1m = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"1y")]
        _1y = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"custom")]
        Custom = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.11.3.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v11.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108